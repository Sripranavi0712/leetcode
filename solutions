1SOL:
import java.util.*;
import java.lang.*;
public class Month {
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        int Salary=sc.nextInt();
        int Shifts=sc.nextInt();
        if(Salary>8000) {
            System.out.println("Salary too large" );
        }
        else if(Salary<0) {
            System.out.println("Salary too small" );
        }
        else if(Shifts<0) {
            System.out.println("Shifts too small" );
        }
        else {
            double Savings=Salary-(0.2 * Salary)-(0.3*Salary) + (0.02*Salary*Shifts);
            int intSavings = (int) Savings;
            System.out.println(intSavings);
        }
        sc.close();
    }
}

2SOL:
import java.util.Scanner;

public class Clerk {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int size = scanner.nextInt();
        int[] salaries = new int[size];
        for (int i = 0; i < size; i++) {
            salaries[i] = scanner.nextInt();
        }

        int repeaters = countRepeaters(salaries, size);
        if (repeaters != -1) {
            System.out.println(repeaters);
        }

        scanner.close();
    }

    public static int countRepeaters(int[] salaries, int size) {
        if (size <= 0) {
            System.out.println("Invalid Input");
            return -1;
        }
        for (int salary : salaries) {
            if (salary < 0) {
                System.out.println("Invalid Input");
                return -1;
            }
        }
        int repeaters = 1;
        for (int i = 0; i < size; i++) {
            boolean isRepeated = false;
            for (int j = i + 1; j < size; j++) {
                if (salaries[i] == salaries[j]) {
                    isRepeated = true;
                    break;
                }
            }
            if (isRepeated) {
                repeaters++;
            }
        }
        return repeaters;
    }
}

3SOL:
import java.util.Scanner;

public class Cricketer {
    static int[] cricketer; 
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        if (n < 0) {
            System.out.println("Invalid array size");
            return;
        }
        int[][] cricket= new int[n][2]; 
        for (int i = 0; i < n; i++) {
            int id = sc.nextInt();
            int cps = sc.nextInt();
            if (id < 0 || cps < 0) {
                System.out.println("Invalid input");
                return;
            }
            cricket[i][0] = id; 
            cricket[i][1] = cps; 
        }
        int cpsToCompare = sc.nextInt();
        if (cpsToCompare < 0) {
            System.out.println("Invalid cps");
            return;
        }
        findCricketerId(cricket, n, cpsToCompare);
        for (int id : cricketer) {
            System.out.print(id + " ");
        }
        sc.close();
    }
    
    public static void findCricketerId(int[][] cricket, int size, int cps) {
        int count = 0;
        for (int i = 0; i < size; i++) {
            if (cricket[i][1] > cps) { 
                count++;
            }
        }
        cricketer = new int[count];
        int index = 0;
        for (int i = 0; i < size; i++) {
            if (cricket[i][1] > cps) { 
                cricketer[index++] = cricket[i][0];
            }
        }
    }
}

4SOL:
import java.util.Scanner;

public class Fb {
    static int[] feedback;

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        if (n < 0) {
            System.out.println("Invalid array size");
            return;
        }

        int[][] feed = new int[n][2]; 
        for (int i = 0; i < n; i++) {
            int eid = sc.nextInt();
            int score = sc.nextInt();
            if (eid < 0 || score < 0) {
                System.out.println("Invalid input");
                return;
            }
            feed[i][0] = eid; 
            feed[i][1] = score; 
        }
        
        highestFeedback(feed, n);
        
        for (int id : feedback) {
            System.out.print(id + " ");
        }

        sc.close();
    }
    
    public static void highestFeedback(int[][] feed, int size) {
        feedback = new int[size];
        
        for (int i = 0; i < size; i++) {
            feedback[i] = feed[i][1];
        }
    }
}


5SOL:
import java.util.Scanner;

public class PowerOfTwo {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int number = scanner.nextInt();

        if (number < 0) {
            System.out.println("Number too small");
        } else if (number > 32767) {
            System.out.println("Number too large");
        } else {
            String result = powerOfTwo(number) ? "Yes" : "No";
            System.out.println(result);
        }

        scanner.close();
    }
    public static boolean powerOfTwo(int n) {
        if (n <= 0) {
            return false;
        }
        return (Math.log(n) / Math.log(2)) % 1 == 0;
    }

}


COUNT OF 3 MULTIPLES:
import java.util.Scanner;

public class MultiplesOfThree {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        
        int n = sc.nextInt();
        if (n < 0 || n > 20) {
            System.out.println("Invalid Input");
            return;
        }
        
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = sc.nextInt();
            if (arr[i] < 0) {
                System.out.println("Invalid Input");
                return;
            }
        }
        
        int result = divisibleBy3(arr, n);
        System.out.println(result);
        
        sc.close();
    }
    
    public static int divisibleBy3(int[] arr, int size) {
        if (size < 0) {
            System.out.println("Invalid Input");
            return -1;
        }
        
        int count = 0;
        for (int i = 0; i < size; i++) {
            if (arr[i] % 3 == 0) {
                count++;
            }
        }
        
        return count;
    }
}

EVENODDSUM:
import java.util.Scanner;

public class PlotPassword {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int n = sc.nextInt();
        if (n < 0 || n > 20) {
            System.out.println("Invalid Input");
            return;
        }

        int[] plotNumbers = new int[n];
        for (int i = 0; i < n; i++) {
            plotNumbers[i] = sc.nextInt();
            if (plotNumbers[i] < 0) {
                System.out.println("Invalid Input");
                return;
            }
        }

        float password = avgOddEvenSum(plotNumbers, n);
        if (password != -1) {
            System.out.printf("%.2f%n", password);
        }

        sc.close();
    }

    public static float avgOddEvenSum(int[] arr, int size) {
        if (size < 0) {
            System.out.println("Invalid Input");
            return -1;
        }

        int sumEven = 0, sumOdd = 0;
        for (int i = 0; i < size; i++) {
            if (arr[i] % 2 == 0) {
                sumEven += arr[i];
            } else {
                sumOdd += arr[i];
            }
        }

        float average = (sumEven + sumOdd) / 2.0f;
        return average;
    }
}

ARITHMETIC OPERATIONS
import java.util.Scanner;

public class Arithmetic {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int a = sc.nextInt();
        int b = sc.nextInt();
        int c = sc.nextInt();
        
        if (a < 0 || a > 32767 || b < 0 || b > 32767 || c < 1 || c > 4) {
            System.out.println("Invalid Input");
        } 
        else {
            int result = performArithmeticOperation(a, b, c);
            if (result == -1) {
                System.out.println("Invalid Input");
            } else {
                System.out.println(result);
            }
        }

        sc.close();
    }

    public static int performArithmeticOperation(int a, int b, int c) {
        switch (c) {
            case 1:
                return a + b;
            case 2:
                return a - b;
            case 3:
                return a * b;
            case 4:
                if (b == 0) {
                    return -1; 
                }
                return a / b;
            default:
                return -1;
        }
    }
}
